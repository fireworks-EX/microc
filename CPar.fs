// Implementation file for parser generated by fsyacc
module CPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "CPar.fsy"

(*	File MicroC/CPar.fsy 
	Parser specification for micro-C, a small imperative language
	sestoft@itu.dk * 2009-09-29
	No (real) shift/reduce conflicts thanks to Niels Kokholm.
*)

open Absyn

// Vardesc 返回的是一个 元组 (g,s)
// g是类型构造函数，s是变量名

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = CstI 10

# 22 "CPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | AMP
  | COLON
  | QST
  | PLUSASSIGN
  | MINUSASSIGN
  | TIMESASSIGN
  | DIVASSIGN
  | MODASSIGN
  | NOT
  | SEQOR
  | SEQAND
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | PREINC
  | PREDEC
  | CHAR
  | ELSE
  | IF
  | INT
  | NULL
  | PRINT
  | PRINTLN
  | RETURN
  | VOID
  | FOR
  | WHILE
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTINT of (int)
  | CSTBOOL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_COLON
    | TOKEN_QST
    | TOKEN_PLUSASSIGN
    | TOKEN_MINUSASSIGN
    | TOKEN_TIMESASSIGN
    | TOKEN_DIVASSIGN
    | TOKEN_MODASSIGN
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_PREINC
    | TOKEN_PREDEC
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_INT
    | TOKEN_NULL
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_RETURN
    | TOKEN_VOID
    | TOKEN_FOR
    | TOKEN_WHILE
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Vardec
    | NONTERM_Vardesc
    | NONTERM_Fundec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Block
    | NONTERM_StmtOrDecSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_StmtU
    | NONTERM_Expr
    | NONTERM_ExprNotAccess
    | NONTERM_AtExprNotAccess
    | NONTERM_Access
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const
    | NONTERM_Type

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | LBRACE  -> 3 
  | RBRACE  -> 4 
  | LBRACK  -> 5 
  | RBRACK  -> 6 
  | SEMI  -> 7 
  | COMMA  -> 8 
  | ASSIGN  -> 9 
  | AMP  -> 10 
  | COLON  -> 11 
  | QST  -> 12 
  | PLUSASSIGN  -> 13 
  | MINUSASSIGN  -> 14 
  | TIMESASSIGN  -> 15 
  | DIVASSIGN  -> 16 
  | MODASSIGN  -> 17 
  | NOT  -> 18 
  | SEQOR  -> 19 
  | SEQAND  -> 20 
  | EQ  -> 21 
  | NE  -> 22 
  | GT  -> 23 
  | LT  -> 24 
  | GE  -> 25 
  | LE  -> 26 
  | PLUS  -> 27 
  | MINUS  -> 28 
  | TIMES  -> 29 
  | DIV  -> 30 
  | MOD  -> 31 
  | PREINC  -> 32 
  | PREDEC  -> 33 
  | CHAR  -> 34 
  | ELSE  -> 35 
  | IF  -> 36 
  | INT  -> 37 
  | NULL  -> 38 
  | PRINT  -> 39 
  | PRINTLN  -> 40 
  | RETURN  -> 41 
  | VOID  -> 42 
  | FOR  -> 43 
  | WHILE  -> 44 
  | CSTSTRING _ -> 45 
  | NAME _ -> 46 
  | CSTINT _ -> 47 
  | CSTBOOL _ -> 48 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_LBRACE 
  | 4 -> TOKEN_RBRACE 
  | 5 -> TOKEN_LBRACK 
  | 6 -> TOKEN_RBRACK 
  | 7 -> TOKEN_SEMI 
  | 8 -> TOKEN_COMMA 
  | 9 -> TOKEN_ASSIGN 
  | 10 -> TOKEN_AMP 
  | 11 -> TOKEN_COLON 
  | 12 -> TOKEN_QST 
  | 13 -> TOKEN_PLUSASSIGN 
  | 14 -> TOKEN_MINUSASSIGN 
  | 15 -> TOKEN_TIMESASSIGN 
  | 16 -> TOKEN_DIVASSIGN 
  | 17 -> TOKEN_MODASSIGN 
  | 18 -> TOKEN_NOT 
  | 19 -> TOKEN_SEQOR 
  | 20 -> TOKEN_SEQAND 
  | 21 -> TOKEN_EQ 
  | 22 -> TOKEN_NE 
  | 23 -> TOKEN_GT 
  | 24 -> TOKEN_LT 
  | 25 -> TOKEN_GE 
  | 26 -> TOKEN_LE 
  | 27 -> TOKEN_PLUS 
  | 28 -> TOKEN_MINUS 
  | 29 -> TOKEN_TIMES 
  | 30 -> TOKEN_DIV 
  | 31 -> TOKEN_MOD 
  | 32 -> TOKEN_PREINC 
  | 33 -> TOKEN_PREDEC 
  | 34 -> TOKEN_CHAR 
  | 35 -> TOKEN_ELSE 
  | 36 -> TOKEN_IF 
  | 37 -> TOKEN_INT 
  | 38 -> TOKEN_NULL 
  | 39 -> TOKEN_PRINT 
  | 40 -> TOKEN_PRINTLN 
  | 41 -> TOKEN_RETURN 
  | 42 -> TOKEN_VOID 
  | 43 -> TOKEN_FOR 
  | 44 -> TOKEN_WHILE 
  | 45 -> TOKEN_CSTSTRING 
  | 46 -> TOKEN_NAME 
  | 47 -> TOKEN_CSTINT 
  | 48 -> TOKEN_CSTBOOL 
  | 51 -> TOKEN_end_of_input
  | 49 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Topdec 
    | 5 -> NONTERM_Topdec 
    | 6 -> NONTERM_Vardec 
    | 7 -> NONTERM_Vardesc 
    | 8 -> NONTERM_Vardesc 
    | 9 -> NONTERM_Vardesc 
    | 10 -> NONTERM_Vardesc 
    | 11 -> NONTERM_Vardesc 
    | 12 -> NONTERM_Fundec 
    | 13 -> NONTERM_Fundec 
    | 14 -> NONTERM_Paramdecs 
    | 15 -> NONTERM_Paramdecs 
    | 16 -> NONTERM_Paramdecs1 
    | 17 -> NONTERM_Paramdecs1 
    | 18 -> NONTERM_Block 
    | 19 -> NONTERM_StmtOrDecSeq 
    | 20 -> NONTERM_StmtOrDecSeq 
    | 21 -> NONTERM_StmtOrDecSeq 
    | 22 -> NONTERM_Stmt 
    | 23 -> NONTERM_Stmt 
    | 24 -> NONTERM_StmtM 
    | 25 -> NONTERM_StmtM 
    | 26 -> NONTERM_StmtM 
    | 27 -> NONTERM_StmtM 
    | 28 -> NONTERM_StmtM 
    | 29 -> NONTERM_StmtM 
    | 30 -> NONTERM_StmtM 
    | 31 -> NONTERM_StmtU 
    | 32 -> NONTERM_StmtU 
    | 33 -> NONTERM_StmtU 
    | 34 -> NONTERM_StmtU 
    | 35 -> NONTERM_Expr 
    | 36 -> NONTERM_Expr 
    | 37 -> NONTERM_ExprNotAccess 
    | 38 -> NONTERM_ExprNotAccess 
    | 39 -> NONTERM_ExprNotAccess 
    | 40 -> NONTERM_ExprNotAccess 
    | 41 -> NONTERM_ExprNotAccess 
    | 42 -> NONTERM_ExprNotAccess 
    | 43 -> NONTERM_ExprNotAccess 
    | 44 -> NONTERM_ExprNotAccess 
    | 45 -> NONTERM_ExprNotAccess 
    | 46 -> NONTERM_ExprNotAccess 
    | 47 -> NONTERM_ExprNotAccess 
    | 48 -> NONTERM_ExprNotAccess 
    | 49 -> NONTERM_ExprNotAccess 
    | 50 -> NONTERM_ExprNotAccess 
    | 51 -> NONTERM_ExprNotAccess 
    | 52 -> NONTERM_ExprNotAccess 
    | 53 -> NONTERM_ExprNotAccess 
    | 54 -> NONTERM_ExprNotAccess 
    | 55 -> NONTERM_ExprNotAccess 
    | 56 -> NONTERM_ExprNotAccess 
    | 57 -> NONTERM_ExprNotAccess 
    | 58 -> NONTERM_ExprNotAccess 
    | 59 -> NONTERM_ExprNotAccess 
    | 60 -> NONTERM_ExprNotAccess 
    | 61 -> NONTERM_ExprNotAccess 
    | 62 -> NONTERM_ExprNotAccess 
    | 63 -> NONTERM_ExprNotAccess 
    | 64 -> NONTERM_AtExprNotAccess 
    | 65 -> NONTERM_AtExprNotAccess 
    | 66 -> NONTERM_AtExprNotAccess 
    | 67 -> NONTERM_Access 
    | 68 -> NONTERM_Access 
    | 69 -> NONTERM_Access 
    | 70 -> NONTERM_Access 
    | 71 -> NONTERM_Access 
    | 72 -> NONTERM_Exprs 
    | 73 -> NONTERM_Exprs 
    | 74 -> NONTERM_Exprs1 
    | 75 -> NONTERM_Exprs1 
    | 76 -> NONTERM_Const 
    | 77 -> NONTERM_Const 
    | 78 -> NONTERM_Const 
    | 79 -> NONTERM_Const 
    | 80 -> NONTERM_Type 
    | 81 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 51 
let _fsyacc_tagOfErrorTerminal = 49

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | AMP  -> "AMP" 
  | COLON  -> "COLON" 
  | QST  -> "QST" 
  | PLUSASSIGN  -> "PLUSASSIGN" 
  | MINUSASSIGN  -> "MINUSASSIGN" 
  | TIMESASSIGN  -> "TIMESASSIGN" 
  | DIVASSIGN  -> "DIVASSIGN" 
  | MODASSIGN  -> "MODASSIGN" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | PREINC  -> "PREINC" 
  | PREDEC  -> "PREDEC" 
  | CHAR  -> "CHAR" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | INT  -> "INT" 
  | NULL  -> "NULL" 
  | PRINT  -> "PRINT" 
  | PRINTLN  -> "PRINTLN" 
  | RETURN  -> "RETURN" 
  | VOID  -> "VOID" 
  | FOR  -> "FOR" 
  | WHILE  -> "WHILE" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 
  | CSTBOOL _ -> "CSTBOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | QST  -> (null : System.Object) 
  | PLUSASSIGN  -> (null : System.Object) 
  | MINUSASSIGN  -> (null : System.Object) 
  | TIMESASSIGN  -> (null : System.Object) 
  | DIVASSIGN  -> (null : System.Object) 
  | MODASSIGN  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | PREINC  -> (null : System.Object) 
  | PREDEC  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 4us; 4us; 4us; 8us; 65535us; 0us; 6us; 4us; 6us; 25us; 34us; 29us; 34us; 35us; 34us; 37us; 42us; 40us; 42us; 43us; 42us; 4us; 65535us; 9us; 11us; 10us; 11us; 14us; 15us; 16us; 17us; 2us; 65535us; 0us; 8us; 4us; 8us; 2us; 65535us; 25us; 26us; 29us; 30us; 3us; 65535us; 25us; 33us; 29us; 33us; 35us; 36us; 9us; 65535us; 27us; 28us; 31us; 32us; 37us; 54us; 40us; 54us; 43us; 54us; 58us; 54us; 59us; 54us; 68us; 54us; 73us; 54us; 3us; 65535us; 37us; 38us; 40us; 41us; 43us; 44us; 4us; 65535us; 37us; 40us; 40us; 40us; 43us; 40us; 58us; 76us; 7us; 65535us; 37us; 45us; 40us; 45us; 43us; 45us; 58us; 46us; 59us; 60us; 68us; 69us; 73us; 74us; 7us; 65535us; 37us; 47us; 40us; 47us; 43us; 47us; 58us; 47us; 59us; 75us; 68us; 77us; 73us; 78us; 40us; 65535us; 37us; 48us; 40us; 48us; 43us; 48us; 50us; 52us; 56us; 57us; 58us; 48us; 59us; 48us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 48us; 71us; 72us; 73us; 48us; 88us; 89us; 90us; 91us; 92us; 93us; 94us; 95us; 96us; 97us; 98us; 99us; 101us; 126us; 104us; 105us; 106us; 107us; 127us; 109us; 128us; 110us; 129us; 111us; 130us; 112us; 131us; 113us; 132us; 114us; 133us; 115us; 134us; 116us; 135us; 117us; 136us; 118us; 137us; 119us; 138us; 120us; 139us; 121us; 140us; 122us; 141us; 124us; 143us; 123us; 154us; 125us; 157us; 126us; 40us; 65535us; 37us; 81us; 40us; 81us; 43us; 81us; 50us; 81us; 56us; 81us; 58us; 81us; 59us; 81us; 62us; 81us; 64us; 81us; 66us; 81us; 68us; 81us; 71us; 81us; 73us; 81us; 88us; 81us; 90us; 81us; 92us; 81us; 94us; 81us; 96us; 81us; 98us; 81us; 101us; 81us; 104us; 81us; 106us; 81us; 127us; 81us; 128us; 81us; 129us; 81us; 130us; 81us; 131us; 81us; 132us; 81us; 133us; 81us; 134us; 81us; 135us; 81us; 136us; 81us; 137us; 81us; 138us; 81us; 139us; 81us; 140us; 81us; 141us; 81us; 143us; 82us; 154us; 81us; 157us; 81us; 41us; 65535us; 37us; 83us; 40us; 83us; 43us; 83us; 50us; 83us; 56us; 83us; 58us; 83us; 59us; 83us; 62us; 83us; 64us; 83us; 66us; 83us; 68us; 83us; 71us; 83us; 73us; 83us; 88us; 83us; 90us; 83us; 92us; 83us; 94us; 83us; 96us; 83us; 98us; 83us; 101us; 83us; 104us; 83us; 106us; 83us; 127us; 83us; 128us; 83us; 129us; 83us; 130us; 83us; 131us; 83us; 132us; 83us; 133us; 83us; 134us; 83us; 135us; 83us; 136us; 83us; 137us; 83us; 138us; 83us; 139us; 83us; 140us; 83us; 141us; 83us; 143us; 83us; 151us; 153us; 154us; 83us; 157us; 83us; 45us; 65535us; 37us; 80us; 40us; 80us; 43us; 80us; 50us; 80us; 56us; 80us; 58us; 80us; 59us; 80us; 62us; 80us; 64us; 80us; 66us; 80us; 68us; 80us; 71us; 80us; 73us; 80us; 84us; 85us; 86us; 87us; 88us; 80us; 90us; 80us; 92us; 80us; 94us; 80us; 96us; 80us; 98us; 80us; 101us; 80us; 104us; 80us; 106us; 80us; 127us; 80us; 128us; 80us; 129us; 80us; 130us; 80us; 131us; 80us; 132us; 80us; 133us; 80us; 134us; 80us; 135us; 80us; 136us; 80us; 137us; 80us; 138us; 80us; 139us; 80us; 140us; 80us; 141us; 80us; 143us; 79us; 145us; 146us; 148us; 149us; 151us; 152us; 154us; 80us; 157us; 80us; 1us; 65535us; 101us; 102us; 2us; 65535us; 101us; 156us; 157us; 158us; 41us; 65535us; 37us; 142us; 40us; 142us; 43us; 142us; 50us; 142us; 56us; 142us; 58us; 142us; 59us; 142us; 62us; 142us; 64us; 142us; 66us; 142us; 68us; 142us; 71us; 142us; 73us; 142us; 88us; 142us; 90us; 142us; 92us; 142us; 94us; 142us; 96us; 142us; 98us; 142us; 101us; 142us; 104us; 142us; 106us; 142us; 127us; 142us; 128us; 142us; 129us; 142us; 130us; 142us; 131us; 142us; 132us; 142us; 133us; 142us; 134us; 142us; 135us; 142us; 136us; 142us; 137us; 142us; 138us; 142us; 139us; 142us; 140us; 142us; 141us; 142us; 143us; 142us; 151us; 142us; 154us; 142us; 157us; 142us; 8us; 65535us; 0us; 10us; 4us; 10us; 25us; 9us; 29us; 9us; 35us; 9us; 37us; 9us; 40us; 9us; 43us; 9us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 18us; 23us; 26us; 29us; 33us; 43us; 47us; 52us; 60us; 68us; 109us; 150us; 192us; 238us; 240us; 243us; 285us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 2us; 6us; 13us; 3us; 6us; 10us; 11us; 1us; 7us; 2us; 7us; 13us; 1us; 8us; 3us; 8us; 10us; 11us; 1us; 9us; 3us; 9us; 10us; 11us; 1us; 9us; 2us; 10us; 11us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 15us; 2us; 16us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 3us; 22us; 28us; 31us; 1us; 23us; 15us; 24us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 24us; 2us; 25us; 26us; 1us; 25us; 15us; 26us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 26us; 1us; 27us; 3us; 28us; 31us; 32us; 3us; 28us; 31us; 32us; 17us; 28us; 31us; 32us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 3us; 28us; 31us; 32us; 2us; 28us; 31us; 1us; 28us; 2us; 29us; 33us; 2us; 29us; 33us; 16us; 29us; 33us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 2us; 29us; 33us; 16us; 29us; 33us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 2us; 29us; 33us; 16us; 29us; 33us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 2us; 29us; 33us; 1us; 29us; 2us; 30us; 34us; 2us; 30us; 34us; 16us; 30us; 34us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 2us; 30us; 34us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 9us; 35us; 40us; 41us; 42us; 43us; 44us; 45us; 68us; 71us; 8us; 35us; 40us; 41us; 42us; 43us; 44us; 45us; 71us; 1us; 36us; 2us; 36us; 65us; 1us; 37us; 1us; 38us; 2us; 38us; 71us; 1us; 39us; 2us; 39us; 71us; 1us; 40us; 15us; 40us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 41us; 15us; 41us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 42us; 15us; 42us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 43us; 15us; 43us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 44us; 15us; 44us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 45us; 15us; 45us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 2us; 46us; 67us; 1us; 46us; 1us; 46us; 1us; 46us; 1us; 47us; 15us; 47us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 48us; 15us; 48us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 49us; 15us; 50us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 15us; 50us; 51us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 15us; 50us; 51us; 52us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 15us; 50us; 51us; 52us; 53us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 15us; 50us; 51us; 52us; 53us; 54us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 15us; 50us; 51us; 52us; 53us; 54us; 55us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 15us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 15us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 15us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 58us; 59us; 60us; 61us; 62us; 63us; 15us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 59us; 60us; 61us; 62us; 63us; 15us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 60us; 61us; 62us; 63us; 15us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 61us; 62us; 63us; 15us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 61us; 62us; 63us; 15us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 62us; 63us; 14us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 15us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 63us; 15us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 71us; 16us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 74us; 75us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 2us; 65us; 68us; 1us; 65us; 1us; 66us; 2us; 66us; 71us; 1us; 67us; 1us; 68us; 2us; 68us; 71us; 1us; 68us; 2us; 69us; 70us; 2us; 69us; 71us; 1us; 70us; 1us; 71us; 1us; 71us; 1us; 73us; 1us; 75us; 1us; 75us; 1us; 76us; 1us; 77us; 1us; 78us; 1us; 78us; 1us; 79us; 1us; 80us; 1us; 81us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 23us; 27us; 29us; 32us; 34us; 38us; 40us; 44us; 46us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 106us; 108us; 124us; 126us; 129us; 131us; 147us; 149us; 151us; 155us; 159us; 177us; 181us; 184us; 186us; 189us; 192us; 209us; 212us; 229us; 232us; 249us; 252us; 254us; 257us; 260us; 277us; 280us; 282us; 284us; 286us; 288us; 290us; 300us; 309us; 311us; 314us; 316us; 318us; 321us; 323us; 326us; 328us; 344us; 346us; 362us; 364us; 380us; 382us; 398us; 400us; 416us; 418us; 434us; 437us; 439us; 441us; 443us; 445us; 461us; 463us; 479us; 481us; 497us; 513us; 529us; 545us; 561us; 577us; 593us; 609us; 625us; 641us; 657us; 673us; 689us; 705us; 720us; 736us; 752us; 769us; 771us; 773us; 775us; 777us; 779us; 781us; 783us; 785us; 787us; 789us; 791us; 793us; 795us; 797us; 799us; 801us; 804us; 806us; 808us; 811us; 813us; 815us; 818us; 820us; 823us; 826us; 828us; 830us; 832us; 834us; 836us; 838us; 840us; 842us; 844us; 846us; 848us; 850us; |]
let _fsyacc_action_rows = 166
let _fsyacc_actionTableElements = [|3us; 16386us; 34us; 165us; 37us; 164us; 42us; 23us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 3us; 16386us; 34us; 165us; 37us; 164us; 42us; 23us; 0us; 16387us; 1us; 32768us; 7us; 7us; 0us; 16388us; 0us; 16389us; 3us; 32768us; 1us; 16us; 29us; 14us; 46us; 12us; 3us; 32768us; 1us; 16us; 29us; 14us; 46us; 13us; 1us; 16390us; 5us; 19us; 0us; 16391us; 1us; 16391us; 1us; 29us; 3us; 32768us; 1us; 16us; 29us; 14us; 46us; 12us; 1us; 16392us; 5us; 19us; 3us; 32768us; 1us; 16us; 29us; 14us; 46us; 12us; 2us; 32768us; 2us; 18us; 5us; 19us; 0us; 16393us; 2us; 32768us; 6us; 20us; 47us; 21us; 0us; 16394us; 1us; 32768us; 6us; 22us; 0us; 16395us; 1us; 32768us; 46us; 24us; 1us; 32768us; 1us; 25us; 2us; 16398us; 34us; 165us; 37us; 164us; 1us; 32768us; 2us; 27us; 1us; 32768us; 3us; 37us; 0us; 16396us; 2us; 16398us; 34us; 165us; 37us; 164us; 1us; 32768us; 2us; 31us; 1us; 32768us; 3us; 37us; 0us; 16397us; 0us; 16399us; 1us; 16400us; 8us; 35us; 2us; 32768us; 34us; 165us; 37us; 164us; 0us; 16401us; 20us; 16403us; 1us; 143us; 3us; 37us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 34us; 165us; 36us; 55us; 37us; 164us; 38us; 163us; 39us; 106us; 40us; 108us; 41us; 50us; 43us; 61us; 44us; 70us; 46us; 100us; 47us; 159us; 48us; 160us; 1us; 32768us; 4us; 39us; 0us; 16402us; 20us; 16403us; 1us; 143us; 3us; 37us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 34us; 165us; 36us; 55us; 37us; 164us; 38us; 163us; 39us; 106us; 40us; 108us; 41us; 50us; 43us; 61us; 44us; 70us; 46us; 100us; 47us; 159us; 48us; 160us; 0us; 16404us; 1us; 32768us; 7us; 43us; 20us; 16403us; 1us; 143us; 3us; 37us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 34us; 165us; 36us; 55us; 37us; 164us; 38us; 163us; 39us; 106us; 40us; 108us; 41us; 50us; 43us; 61us; 44us; 70us; 46us; 100us; 47us; 159us; 48us; 160us; 0us; 16405us; 0us; 16406us; 1us; 16406us; 35us; 59us; 0us; 16407us; 15us; 32768us; 7us; 49us; 12us; 138us; 19us; 141us; 20us; 140us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 0us; 16408us; 14us; 32768us; 1us; 143us; 7us; 51us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 0us; 16409us; 15us; 32768us; 7us; 53us; 12us; 138us; 19us; 141us; 20us; 140us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 0us; 16410us; 0us; 16411us; 1us; 32768us; 1us; 56us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 15us; 32768us; 2us; 58us; 12us; 138us; 19us; 141us; 20us; 140us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 18us; 32768us; 1us; 143us; 3us; 37us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 36us; 55us; 38us; 163us; 39us; 106us; 40us; 108us; 41us; 50us; 43us; 61us; 44us; 70us; 46us; 100us; 47us; 159us; 48us; 160us; 18us; 32768us; 1us; 143us; 3us; 37us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 36us; 55us; 38us; 163us; 39us; 106us; 40us; 108us; 41us; 50us; 43us; 61us; 44us; 70us; 46us; 100us; 47us; 159us; 48us; 160us; 0us; 16412us; 1us; 32768us; 1us; 62us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 15us; 32768us; 7us; 64us; 12us; 138us; 19us; 141us; 20us; 140us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 15us; 32768us; 7us; 66us; 12us; 138us; 19us; 141us; 20us; 140us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 15us; 32768us; 2us; 68us; 12us; 138us; 19us; 141us; 20us; 140us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 18us; 32768us; 1us; 143us; 3us; 37us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 36us; 55us; 38us; 163us; 39us; 106us; 40us; 108us; 41us; 50us; 43us; 61us; 44us; 70us; 46us; 100us; 47us; 159us; 48us; 160us; 0us; 16413us; 1us; 32768us; 1us; 71us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 15us; 32768us; 2us; 73us; 12us; 138us; 19us; 141us; 20us; 140us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 18us; 32768us; 1us; 143us; 3us; 37us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 36us; 55us; 38us; 163us; 39us; 106us; 40us; 108us; 41us; 50us; 43us; 61us; 44us; 70us; 46us; 100us; 47us; 159us; 48us; 160us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 8us; 16419us; 2us; 150us; 5us; 154us; 9us; 98us; 13us; 88us; 14us; 90us; 15us; 92us; 16us; 94us; 17us; 96us; 7us; 16419us; 5us; 154us; 9us; 98us; 13us; 88us; 14us; 90us; 15us; 92us; 16us; 94us; 17us; 96us; 0us; 16420us; 1us; 16420us; 2us; 144us; 0us; 16421us; 3us; 32768us; 1us; 148us; 29us; 151us; 46us; 147us; 1us; 16422us; 5us; 154us; 3us; 32768us; 1us; 148us; 29us; 151us; 46us; 147us; 1us; 16423us; 5us; 154us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 14us; 16424us; 12us; 138us; 19us; 141us; 20us; 140us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 14us; 16425us; 12us; 138us; 19us; 141us; 20us; 140us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 14us; 16426us; 12us; 138us; 19us; 141us; 20us; 140us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 14us; 16427us; 12us; 138us; 19us; 141us; 20us; 140us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 14us; 16428us; 12us; 138us; 19us; 141us; 20us; 140us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 14us; 16429us; 12us; 138us; 19us; 141us; 20us; 140us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 1us; 16451us; 1us; 101us; 13us; 16456us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 1us; 32768us; 2us; 103us; 0us; 16430us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 0us; 16431us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 14us; 16432us; 12us; 138us; 19us; 141us; 20us; 140us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 0us; 16433us; 3us; 16434us; 29us; 129us; 30us; 130us; 31us; 131us; 3us; 16435us; 29us; 129us; 30us; 130us; 31us; 131us; 0us; 16436us; 0us; 16437us; 0us; 16438us; 9us; 16439us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 9us; 16440us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 9us; 16441us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 9us; 16442us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 9us; 16443us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 9us; 16444us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 15us; 32768us; 11us; 139us; 12us; 138us; 19us; 141us; 20us; 140us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 14us; 16445us; 12us; 138us; 19us; 141us; 20us; 140us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 11us; 16446us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 14us; 32768us; 12us; 138us; 19us; 141us; 20us; 140us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 12us; 16447us; 20us; 140us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 15us; 32768us; 6us; 155us; 12us; 138us; 19us; 141us; 20us; 140us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 15us; 16458us; 8us; 157us; 12us; 138us; 19us; 141us; 20us; 140us; 21us; 132us; 22us; 133us; 23us; 134us; 24us; 135us; 25us; 136us; 26us; 137us; 27us; 127us; 28us; 128us; 29us; 129us; 30us; 130us; 31us; 131us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 0us; 16448us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 0us; 16449us; 3us; 32768us; 1us; 148us; 29us; 151us; 46us; 147us; 1us; 16450us; 5us; 154us; 0us; 16451us; 3us; 32768us; 1us; 148us; 29us; 151us; 46us; 147us; 2us; 32768us; 2us; 150us; 5us; 154us; 0us; 16452us; 8us; 32768us; 1us; 143us; 10us; 145us; 28us; 161us; 29us; 151us; 38us; 163us; 46us; 147us; 47us; 159us; 48us; 160us; 1us; 16453us; 5us; 154us; 0us; 16454us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 0us; 16455us; 0us; 16457us; 13us; 32768us; 1us; 143us; 10us; 145us; 18us; 104us; 28us; 161us; 29us; 151us; 32us; 84us; 33us; 86us; 38us; 163us; 39us; 106us; 40us; 108us; 46us; 100us; 47us; 159us; 48us; 160us; 0us; 16459us; 0us; 16460us; 0us; 16461us; 1us; 32768us; 47us; 162us; 0us; 16462us; 0us; 16463us; 0us; 16464us; 0us; 16465us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 7us; 8us; 12us; 13us; 15us; 16us; 17us; 21us; 25us; 27us; 28us; 30us; 34us; 36us; 40us; 43us; 44us; 47us; 48us; 50us; 51us; 53us; 55us; 58us; 60us; 62us; 63us; 66us; 68us; 70us; 71us; 72us; 74us; 77us; 78us; 99us; 101us; 102us; 123us; 124us; 126us; 147us; 148us; 149us; 151us; 152us; 168us; 169us; 184us; 185us; 201us; 202us; 203us; 205us; 219us; 235us; 254us; 273us; 274us; 276us; 290us; 306us; 320us; 336us; 350us; 366us; 385us; 386us; 388us; 402us; 418us; 437us; 438us; 439us; 440us; 441us; 442us; 451us; 459us; 460us; 462us; 463us; 467us; 469us; 473us; 475us; 489us; 504us; 518us; 533us; 547us; 562us; 576us; 591us; 605us; 620us; 634us; 649us; 651us; 665us; 667us; 668us; 682us; 683us; 697us; 712us; 713us; 717us; 721us; 722us; 723us; 724us; 734us; 744us; 754us; 764us; 774us; 784us; 800us; 815us; 827us; 842us; 855us; 871us; 887us; 901us; 915us; 929us; 943us; 957us; 971us; 985us; 999us; 1013us; 1027us; 1041us; 1055us; 1069us; 1083us; 1097us; 1098us; 1112us; 1113us; 1117us; 1119us; 1120us; 1124us; 1127us; 1128us; 1137us; 1139us; 1140us; 1154us; 1155us; 1156us; 1170us; 1171us; 1172us; 1173us; 1175us; 1176us; 1177us; 1178us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 2us; 1us; 2us; 1us; 2us; 3us; 3us; 4us; 6us; 6us; 0us; 1us; 1us; 3us; 3us; 0us; 2us; 3us; 1us; 1us; 2us; 2us; 3us; 1us; 7us; 9us; 5us; 7us; 5us; 9us; 5us; 1us; 1us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 2us; 2us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 5us; 3us; 3us; 1us; 3us; 2us; 1us; 3us; 2us; 2us; 4us; 0us; 1us; 1us; 3us; 1us; 1us; 2us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; 13us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 16us; 17us; 17us; 17us; 17us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 20us; 20us; 21us; 21us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 16397us; 16399us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 65535us; 16404us; 65535us; 65535us; 16405us; 16406us; 65535us; 16407us; 65535us; 16408us; 65535us; 16409us; 65535us; 16410us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 16414us; 16415us; 16416us; 16417us; 16418us; 65535us; 65535us; 16420us; 65535us; 16421us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16430us; 65535us; 65535us; 65535us; 65535us; 16433us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16448us; 65535us; 16449us; 65535us; 65535us; 16451us; 65535us; 65535us; 16452us; 65535us; 65535us; 16454us; 65535us; 16455us; 16457us; 65535us; 16459us; 16460us; 16461us; 65535us; 16462us; 16463us; 16464us; 16465us; |]
let _fsyacc_reductions ()  =    [| 
# 467 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 476 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "CPar.fsy"
                                                               Prog _1 
                   )
# 46 "CPar.fsy"
                 : Absyn.program));
# 487 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "CPar.fsy"
                                                               [] 
                   )
# 50 "CPar.fsy"
                 : 'Topdecs));
# 497 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "CPar.fsy"
                                                               _1 :: _2 
                   )
# 51 "CPar.fsy"
                 : 'Topdecs));
# 509 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "CPar.fsy"
                                                               Vardec (fst _1, snd _1) 
                   )
# 55 "CPar.fsy"
                 : 'Topdec));
# 520 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "CPar.fsy"
                                                               _1 
                   )
# 56 "CPar.fsy"
                 : 'Topdec));
# 531 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "CPar.fsy"
                                                               ((fst _2) _1, snd _2) 
                   )
# 60 "CPar.fsy"
                 : 'Vardec));
# 543 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "CPar.fsy"
                                                               ((fun t -> t), _1)                      
                   )
# 64 "CPar.fsy"
                 : 'Vardesc));
# 554 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "CPar.fsy"
                                                               compose1 TypP _2                        
                   )
# 65 "CPar.fsy"
                 : 'Vardesc));
# 565 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "CPar.fsy"
                                                               _2                                      
                   )
# 66 "CPar.fsy"
                 : 'Vardesc));
# 576 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, None)) _1    
                   )
# 67 "CPar.fsy"
                 : 'Vardesc));
# 587 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, Some _3)) _1 
                   )
# 68 "CPar.fsy"
                 : 'Vardesc));
# 599 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "CPar.fsy"
                                                               Fundec(None,     _2, _4, _6) 
                   )
# 72 "CPar.fsy"
                 : 'Fundec));
# 612 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "CPar.fsy"
                                                               Fundec(Some(_1), _2, _4, _6) 
                   )
# 73 "CPar.fsy"
                 : 'Fundec));
# 626 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "CPar.fsy"
                                                               [] 
                   )
# 77 "CPar.fsy"
                 : 'Paramdecs));
# 636 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "CPar.fsy"
                                                               _1 
                   )
# 78 "CPar.fsy"
                 : 'Paramdecs));
# 647 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "CPar.fsy"
                                                               [_1]     
                   )
# 82 "CPar.fsy"
                 : 'Paramdecs1));
# 658 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 83 "CPar.fsy"
                 : 'Paramdecs1));
# 670 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "CPar.fsy"
                                                               Block _2 
                   )
# 87 "CPar.fsy"
                 : 'Block));
# 681 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "CPar.fsy"
                                                               [] 
                   )
# 91 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 691 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "CPar.fsy"
                                                               Stmt _1 :: _2 
                   )
# 92 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 703 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "CPar.fsy"
                                                               Dec (fst _1, snd _1) :: _3 
                   )
# 93 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 715 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "CPar.fsy"
                                                               _1 
                   )
# 97 "CPar.fsy"
                 : 'Stmt));
# 726 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "CPar.fsy"
                                                               _1 
                   )
# 98 "CPar.fsy"
                 : 'Stmt));
# 737 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "CPar.fsy"
                                                               Expr(_1)             
                   )
# 102 "CPar.fsy"
                 : 'StmtM));
# 748 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "CPar.fsy"
                                                               Return None          
                   )
# 103 "CPar.fsy"
                 : 'StmtM));
# 758 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "CPar.fsy"
                                                               Return(Some(_2))     
                   )
# 104 "CPar.fsy"
                 : 'StmtM));
# 769 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "CPar.fsy"
                                                               _1                   
                   )
# 105 "CPar.fsy"
                 : 'StmtM));
# 780 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 106 "CPar.fsy"
                 : 'StmtM));
# 793 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "CPar.fsy"
                                                                         For(_3, _5, _7, _9) 
                   )
# 107 "CPar.fsy"
                 : 'StmtM));
# 807 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 108 "CPar.fsy"
                 : 'StmtM));
# 819 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 112 "CPar.fsy"
                 : 'StmtU));
# 832 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "CPar.fsy"
                                                               If(_3, _5, Block []) 
                   )
# 113 "CPar.fsy"
                 : 'StmtU));
# 844 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "CPar.fsy"
                                                                         For(_3, _5, _7, _9) 
                   )
# 114 "CPar.fsy"
                 : 'StmtU));
# 858 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 115 "CPar.fsy"
                 : 'StmtU));
# 870 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "CPar.fsy"
                                                               Access _1           
                   )
# 119 "CPar.fsy"
                 : 'Expr));
# 881 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "CPar.fsy"
                                                               _1                  
                   )
# 120 "CPar.fsy"
                 : 'Expr));
# 892 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "CPar.fsy"
                                                               _1                  
                   )
# 124 "CPar.fsy"
                 : 'ExprNotAccess));
# 903 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "CPar.fsy"
                                                               PreInc _2           
                   )
# 125 "CPar.fsy"
                 : 'ExprNotAccess));
# 914 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "CPar.fsy"
                                                               PreDec _2           
                   )
# 126 "CPar.fsy"
                 : 'ExprNotAccess));
# 925 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "CPar.fsy"
                                                               AssignPrim("+=", _1, _3)  
                   )
# 127 "CPar.fsy"
                 : 'ExprNotAccess));
# 937 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "CPar.fsy"
                                                               AssignPrim("-=", _1, _3) 
                   )
# 128 "CPar.fsy"
                 : 'ExprNotAccess));
# 949 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "CPar.fsy"
                                                               AssignPrim("*=", _1, _3) 
                   )
# 129 "CPar.fsy"
                 : 'ExprNotAccess));
# 961 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "CPar.fsy"
                                                               AssignPrim("/=", _1, _3)   
                   )
# 130 "CPar.fsy"
                 : 'ExprNotAccess));
# 973 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "CPar.fsy"
                                                               AssignPrim("%=", _1, _3)   
                   )
# 131 "CPar.fsy"
                 : 'ExprNotAccess));
# 985 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "CPar.fsy"
                                                               Assign(_1, _3)      
                   )
# 132 "CPar.fsy"
                 : 'ExprNotAccess));
# 997 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "CPar.fsy"
                                                               Call(_1, _3)        
                   )
# 133 "CPar.fsy"
                 : 'ExprNotAccess));
# 1009 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "CPar.fsy"
                                                               Prim1("!", _2)      
                   )
# 134 "CPar.fsy"
                 : 'ExprNotAccess));
# 1020 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "CPar.fsy"
                                                               Prim1("printi", _2) 
                   )
# 135 "CPar.fsy"
                 : 'ExprNotAccess));
# 1031 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "CPar.fsy"
                                                               Prim1("printc", nl) 
                   )
# 136 "CPar.fsy"
                 : 'ExprNotAccess));
# 1041 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "CPar.fsy"
                                                               Prim2("+",  _1, _3) 
                   )
# 137 "CPar.fsy"
                 : 'ExprNotAccess));
# 1053 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "CPar.fsy"
                                                               Prim2("-",  _1, _3) 
                   )
# 138 "CPar.fsy"
                 : 'ExprNotAccess));
# 1065 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "CPar.fsy"
                                                               Prim2("*",  _1, _3) 
                   )
# 139 "CPar.fsy"
                 : 'ExprNotAccess));
# 1077 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "CPar.fsy"
                                                               Prim2("/",  _1, _3) 
                   )
# 140 "CPar.fsy"
                 : 'ExprNotAccess));
# 1089 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "CPar.fsy"
                                                               Prim2("%",  _1, _3) 
                   )
# 141 "CPar.fsy"
                 : 'ExprNotAccess));
# 1101 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "CPar.fsy"
                                                               Prim2("==", _1, _3) 
                   )
# 142 "CPar.fsy"
                 : 'ExprNotAccess));
# 1113 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "CPar.fsy"
                                                               Prim2("!=", _1, _3) 
                   )
# 143 "CPar.fsy"
                 : 'ExprNotAccess));
# 1125 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "CPar.fsy"
                                                               Prim2(">",  _1, _3) 
                   )
# 144 "CPar.fsy"
                 : 'ExprNotAccess));
# 1137 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "CPar.fsy"
                                                               Prim2("<",  _1, _3) 
                   )
# 145 "CPar.fsy"
                 : 'ExprNotAccess));
# 1149 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "CPar.fsy"
                                                               Prim2(">=", _1, _3) 
                   )
# 146 "CPar.fsy"
                 : 'ExprNotAccess));
# 1161 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "CPar.fsy"
                                                               Prim2("<=", _1, _3) 
                   )
# 147 "CPar.fsy"
                 : 'ExprNotAccess));
# 1173 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "CPar.fsy"
                                                               Prim3(_1, _3, _5)   
                   )
# 148 "CPar.fsy"
                 : 'ExprNotAccess));
# 1186 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "CPar.fsy"
                                                               Andalso(_1, _3)     
                   )
# 149 "CPar.fsy"
                 : 'ExprNotAccess));
# 1198 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "CPar.fsy"
                                                               Orelse(_1, _3)      
                   )
# 150 "CPar.fsy"
                 : 'ExprNotAccess));
# 1210 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "CPar.fsy"
                                                               CstI _1             
                   )
# 154 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1221 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "CPar.fsy"
                                                               _2                  
                   )
# 155 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1232 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "CPar.fsy"
                                                               Addr _2             
                   )
# 156 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1243 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "CPar.fsy"
                                                               AccVar _1           
                   )
# 160 "CPar.fsy"
                 : 'Access));
# 1254 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "CPar.fsy"
                                                               _2                  
                   )
# 161 "CPar.fsy"
                 : 'Access));
# 1265 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "CPar.fsy"
                                                               AccDeref (Access _2)
                   )
# 162 "CPar.fsy"
                 : 'Access));
# 1276 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "CPar.fsy"
                                                               AccDeref _2         
                   )
# 163 "CPar.fsy"
                 : 'Access));
# 1287 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "CPar.fsy"
                                                               AccIndex(_1, _3)    
                   )
# 164 "CPar.fsy"
                 : 'Access));
# 1299 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "CPar.fsy"
                                                               []       
                   )
# 168 "CPar.fsy"
                 : 'Exprs));
# 1309 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "CPar.fsy"
                                                               _1       
                   )
# 169 "CPar.fsy"
                 : 'Exprs));
# 1320 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "CPar.fsy"
                                                               [_1]     
                   )
# 173 "CPar.fsy"
                 : 'Exprs1));
# 1331 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 174 "CPar.fsy"
                 : 'Exprs1));
# 1343 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "CPar.fsy"
                                                               _1       
                   )
# 178 "CPar.fsy"
                 : 'Const));
# 1354 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "CPar.fsy"
                                                               _1       
                   )
# 179 "CPar.fsy"
                 : 'Const));
# 1365 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "CPar.fsy"
                                                               - _2     
                   )
# 180 "CPar.fsy"
                 : 'Const));
# 1376 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "CPar.fsy"
                                                               -1       
                   )
# 181 "CPar.fsy"
                 : 'Const));
# 1386 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "CPar.fsy"
                                                               TypI     
                   )
# 185 "CPar.fsy"
                 : 'Type));
# 1396 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "CPar.fsy"
                                                               TypC     
                   )
# 186 "CPar.fsy"
                 : 'Type));
|]
# 1407 "CPar.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 52;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
